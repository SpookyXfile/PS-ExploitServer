package com.spookyx.xploitserver5;

import android.app.NotificationManager;
import android.content.Context;

import android.content.SharedPreferences;
import android.content.pm.PackageManager;
import android.net.wifi.WifiInfo;
import android.net.wifi.WifiManager;
import android.util.Log;
import android.widget.Toast;

import androidx.preference.PreferenceManager;

import org.w3c.dom.Attr;
import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;

import java.io.File;
import java.net.Inet4Address;
import java.net.InetAddress;
import java.net.NetworkInterface;
import java.net.SocketException;
import java.util.ArrayList;
import java.util.Enumeration;

import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.stream.StreamResult;

import spookyx.lib.tools.Misc;
import spookyx.lib.tools.StorageUtil;
import spookyx.lib.tools.XmlDomParser;


@SuppressWarnings( { "unused", "SameParameterValue" } )
class Utils
{
    private XmlDomParser xmlDomParser = new XmlDomParser();
    private StorageUtil storageDirHelper = new StorageUtil();
    private Misc misc = new Misc();


    Utils()
    {

    }


    void SaveSetting(Context context, String sValue) {
        SharedPreferences sharedPref = context.getSharedPreferences("serverSettings", Context.MODE_PRIVATE);
        SharedPreferences.Editor editor = sharedPref.edit();

        editor.putString("HOSTADDR", sValue);
        editor.apply();
    }

    void SaveSetting(Context context, String sKey, int iValue) {
        SharedPreferences sharedPref = context.getSharedPreferences("serverSettings", Context.MODE_PRIVATE);
        SharedPreferences.Editor editor = sharedPref.edit();

        editor.putInt(sKey, iValue);
        editor.apply();
    }

    void SaveSetting(Context context, String sKey, boolean bValue) {
        SharedPreferences sharedPref = context.getSharedPreferences("serverSettings", Context.MODE_PRIVATE );
        SharedPreferences.Editor editor = sharedPref.edit();

        editor.putBoolean(sKey, bValue);
        editor.apply();
    }

    void SaveSetting(Context context, String sKey, String strValue )
    {
        SharedPreferences sharedPref = context.getSharedPreferences("serverSettings", Context.MODE_PRIVATE );
        SharedPreferences.Editor editor = sharedPref.edit();

        editor.putString( sKey, strValue );
        editor.apply();

    }

    boolean GetSetting(Context context, String sKey, boolean bDefault) {
        SharedPreferences sharedPref = context.getSharedPreferences("serverSettings", Context.MODE_PRIVATE);

        return sharedPref.getBoolean(sKey, bDefault);
    }

    String GetSetting(Context context, String sKey, String sDefault) {
        SharedPreferences sharedPref = context.getSharedPreferences("serverSettings", Context.MODE_PRIVATE);

        return sharedPref.getString(sKey, sDefault);
    }

    int GetSetting(Context context, String sKey, int iDefault) {
        SharedPreferences sharedPref = context.getSharedPreferences("serverSettings", Context.MODE_PRIVATE);

        return sharedPref.getInt(sKey, iDefault);
    }

    void ShowToast(Context mContext, String msg, int duration) {
        Toast.makeText(mContext, msg, duration).show();

    }

    void deleteNotification(Context mContext) {
        NotificationManager notificationManager = (NotificationManager) mContext.getSystemService(Context.NOTIFICATION_SERVICE);

        if (notificationManager != null) {
            notificationManager.cancelAll();
        }
    }

    static String getDataDir( Context context )
    {
        try
        {
            return  context.getPackageManager().getPackageInfo(context.getPackageName(), 0).applicationInfo.dataDir;
        }
        catch (PackageManager.NameNotFoundException ignored)
        {
            return null;
        }
    }


    void createItemsXml( String xmlFile, ArrayList<Item> arrayItemsList )
    {
        try
        {
            DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
            DocumentBuilder dBuilder = dbFactory.newDocumentBuilder();

            Document doc = dBuilder.newDocument();

            // root element
            Element rootElement = doc.createElement("root");
            doc.appendChild(rootElement);

            Log.i("zobbi", "Array List Item count : " + arrayItemsList.size());

            for (int i = 0; i < arrayItemsList.size(); i++) {
                // staff elements
                Element item = doc.createElement("Item");
                rootElement.appendChild(item);

                // set attribute to staff element
                Attr attr = doc.createAttribute("id");
                attr.setValue(String.valueOf(i));
                item.setAttributeNode(attr);

                // first name elements
                Element title = doc.createElement("title");
                title.appendChild(doc.createTextNode(String.valueOf(arrayItemsList.get(i).getTitle())));
                item.appendChild(title);

                // first name elements
                Element subtitle = doc.createElement("subtitle");
                subtitle.appendChild(doc.createTextNode(String.valueOf(arrayItemsList.get(i).getSubtitle())));
                item.appendChild(subtitle);

                // first name elements
                Element enable = doc.createElement("enable");
                enable.appendChild(doc.createTextNode(String.valueOf(arrayItemsList.get(i).isActive())));
                item.appendChild(enable);

                // first name elements
                Element folder = doc.createElement("folder");
                folder.appendChild(doc.createTextNode(arrayItemsList.get(i).getFolder()));
                item.appendChild(folder);

                Log.i("zobbi", "Array List Item No : " + i + " Array List Item SubTitle : " + arrayItemsList.get(i).getFolder());
            }

            // write the content into xml file
            TransformerFactory transformerFactory = TransformerFactory.newInstance();
            Transformer transformer = transformerFactory.newTransformer();


            DOMSource source = new DOMSource(doc);
            StreamResult result = new StreamResult(new File(xmlFile));
            transformer.transform(source, result);

        } catch (Exception ex) {
            Log.e("zobbi la mouche", String.valueOf(ex.getMessage()));
        }

    }

    ArrayList<Item> openItemXml( String xmlFile, ArrayList<Item> arrayItemsList )
    {
        try {
            Document doc = xmlDomParser.openXml(xmlFile);
            //Element root = myXmlParser.getElement( doc );

            NodeList nList = doc.getElementsByTagName("Item");


            Log.i("zobbi", "Current Element count : " + nList.getLength());

            if (nList.getLength() > 0)
            {
                Node nNode;

                for (int i = 0; i < nList.getLength(); i++)
                {
                    nNode = nList.item(i);

                    Log.i("zobbi", "Current Element : " + nNode.getNodeName());

                    if (nNode.getNodeType() == Node.ELEMENT_NODE)
                    {
                        Element eElement = (Element) nNode;

                        Log.i("zobbi", "Current Element title : " + xmlDomParser.getValue(eElement, "title"));
                        Log.i("zobbi", "Current Element subtitle : " + xmlDomParser.getValue(eElement, "subtitle"));
                        Log.i("zobbi", "Current Element enable : " + xmlDomParser.getValue(eElement, "enable"));
                        Log.i("zobbi", "Current Element folder : " + xmlDomParser.getValue(eElement, "folder"));

                        String strID = nList.item(i).getAttributes().getNamedItem("id").getNodeValue();
                        Log.i("zobbi", "Current Element Item ID : " + strID);

                        //nodeList.item(x).getAttributes().getNamedItem("name").getNodeValue())

                        Log.i("zobbi", "\n\n");

                        arrayItemsList.add( new Item(   xmlDomParser.getValue( eElement,"title" ),
                                                        xmlDomParser.getValue( eElement,"subtitle" ),
                                                        xmlDomParser.getValue( eElement,"enable" ).equals( "true" ),
                                                        xmlDomParser.getValue( eElement,"folder" ) ) );

                    }

                }
            }
        }
        catch (Exception ex)
        {
            Log.i("zobbi", String.valueOf(ex.getMessage()));
        }

        return arrayItemsList;
    }

    void saveBrowseArchiveFolder( Context context, String folder )
    {
        SharedPreferences preferences = PreferenceManager.getDefaultSharedPreferences( context );

        SharedPreferences.Editor edit = preferences.edit();
        edit.putString("saveBrowseArchiveFolder", folder );
        edit.apply();
    }


    boolean setDefaultArchiveFolder( Context context )
    {
        SharedPreferences preferences = PreferenceManager.getDefaultSharedPreferences(context);

        String internalFolderSDCARD = storageDirHelper.getInternalStorageDir();

        String externalFolderSDCARD = storageDirHelper.getExternalSDCARD( context );
        if ( externalFolderSDCARD == null )
            externalFolderSDCARD = storageDirHelper.getInternalStorageDir();

        boolean enableSaveDefaultArchive = preferences.getBoolean("enableSaveDefaultArchive",false );
        boolean enableExternalSDCard = preferences.getBoolean("enableExternalSDCardDefaultArchive",false );

        String defaultArchiveFolder;

        if ( enableSaveDefaultArchive )
            defaultArchiveFolder = preferences.getString("saveBrowseArchiveFolder",storageDirHelper.getInternalStorageDir() + "/Download" );
        else
            defaultArchiveFolder = enableExternalSDCard ? externalFolderSDCARD : internalFolderSDCARD + "/Download";

        SharedPreferences.Editor edit = preferences.edit();
        edit.putString("defaultArchiveFolder", defaultArchiveFolder );
        edit.apply();

        return true;
    }

    String getDefaultArchiveFolder( Context context )
    {
        SharedPreferences preferences = PreferenceManager.getDefaultSharedPreferences( context );

        return preferences.getString("defaultArchiveFolder",storageDirHelper.getInternalStorageDir() + "/Download" );
    }


    boolean setExploitStorageDir(Context context) {
        SharedPreferences preferences = PreferenceManager.getDefaultSharedPreferences(context);

        String storageDir = storageDirHelper.getInternalStorageDir() + context.getString(R.string.xploit_folder);

        SharedPreferences.Editor edit = preferences.edit();
        edit.putString("StorageDir", storageDir);
        edit.apply();

        File destFile = new File(preferences.getString("StorageDir", storageDir));
        Log.i("zobbi", "destFile : " + destFile.getAbsolutePath());

        if (!destFile.exists()) {
            return destFile.mkdir();

        }

        return true;
    }

    String getExploitStorageDir(Context context) {
        SharedPreferences preferences = PreferenceManager.getDefaultSharedPreferences(context);

        return preferences.getString("StorageDir", storageDirHelper.getInternalStorageDir() + File.separator + context.getString(R.string.xploit_folder));
    }



    /*
    @SuppressLint( "InflateParams" )
    public void createEditItemDialog( Activity activity, int icon, String titleDialog,
                                      String subtitleDialog, final String msg,
                                      final int charMaxLength, final int changeDialogBox )
    {

        //final List<String> listEdit = new ArrayList<>();

        AlertDialog.Builder builder = new AlertDialog.Builder( activity );

        //LayoutInflater inflater = LayoutInflater.from( getApplicationContext() );
        LayoutInflater inflater = this.getLayoutInflater();

        final View subView = inflater.inflate( R.layout.item_dialogbox,null );

        final EditText etComments   = subView.findViewById( R.id.etComments );
        final TextView message      = subView.findViewById( R.id.alert_message );

        // maximum  character length
        etComments.setFilters( new InputFilter[]
                {
                        new InputFilter.LengthFilter( charMaxLength )

                } );

        message.setText( msg );

        etComments.setHint( "Set at least five characters" );

        builder.setView( subView );
        builder.setIcon( icon );       // R.drawable.about_icon
        builder.setTitle( titleDialog );
        builder.setMessage( subtitleDialog );
        builder.setCancelable( false );


        final TextView Title = new TextView( mActivity );
        Title.setTextColor( Color.CYAN );
        Title.setText("Title");
        Title.setPadding(10, 10, 10, 10);
        Title.setGravity(Gravity.CENTER);
        Title.setTextColor(Color.WHITE);
        Title.setTextSize(20);
        builder.setCustomTitle( Title );


        builder.setPositiveButton("OK", new DialogInterface.OnClickListener()
        {
            public void onClick( DialogInterface dialog, int whichButton )
            {
                String data = String.valueOf( etComments.getText() );

                if ( data.isEmpty() )
                {
                    misc.PrintAppendHtmlLog( textLogCtrl, R.color.alertColor,16,"Please enter a least 1 character ( max 10 )" );

                    dialog.cancel();

                    return;
                }

                if ( changeDialogBox == TITLE_DIALOG_BOX )
                    sendTitleDialogData( data );
                else if ( changeDialogBox == SUBTITLE_DIALOG_BOX )
                    sendSubTitleDialogData( data );

                dialog.dismiss();

            }

        } );

        final AlertDialog alert = builder.create();
        alert.show();

        alert.getButton( AlertDialog.BUTTON_POSITIVE ).setEnabled( false );

        etComments.addTextChangedListener( new TextWatcher()
        {

            @Override
            public void beforeTextChanged( CharSequence charSequence, int start, int count, int after )
            {

            }

            @Override
            public void onTextChanged( CharSequence charSequence, int start, int count, int after )
            {
                //message.setText( String.format( Locale.ENGLISH,"%s Char Left : %d",message.getText(), ( charMaxLength - count ) ) );
            }

            @Override
            public void afterTextChanged( Editable editable )
            {
                Log.i( "zobbi", "char len : " + editable.length() + " max len : " + charMaxLength );

                if ( editable.length() >= 5 && editable.length() <= charMaxLength ) {
                    alert.getButton(AlertDialog.BUTTON_POSITIVE).setEnabled( true );
                }
                else
                {
                    if ( editable.length() == 0 )
                        etComments.setHint( "Set at least five characters" );

                    alert.getButton( AlertDialog.BUTTON_POSITIVE).setEnabled( false );
                    etComments.setError( "Set between 5 and " + charMaxLength + " characters" );

                }

            }

        } );

    }

    // do something with the data coming from the AlertDialog
    private void sendTitleDialogData( String data )
    {
        Toast.makeText(this, data, Toast.LENGTH_SHORT ).show();

        title = data;

        Intent intent = new Intent( getApplicationContext(), FileExplorer.class );
        intent.putExtra("fileRoot", utils.getDefaultArchiveFolder( getApplicationContext() ) );

        startActivityForResult( intent, REQUEST_PATH );

    }

    // do something with the data coming from the AlertDialog
    private void sendSubTitleDialogData( String subtitleItem )
    {
        Log.i("zobbi","Selected subtitle : " + title );

        adapter.addItem( title, subtitleItem,false,utils.getExploitStorageDir( getApplicationContext() ) +
                File.separator + title.replace(' ','_' ).toLowerCase() );

        Log.i("zobbi","Selected subtitle : " + subtitleItem );

        utils.createItemsXml(utils.getExploitStorageDir( getApplicationContext() ) + File.separator + "exploitItemList.xml", adapter.getItemList() );

        Log.i("zobbi","addItem: " + adapter.getItemCount());

        misc.PrintAppendHtmlLog( textLogCtrl, R.color.colorBlue,16, "Add Exploit Item DONE..." );

    }

     */

}
