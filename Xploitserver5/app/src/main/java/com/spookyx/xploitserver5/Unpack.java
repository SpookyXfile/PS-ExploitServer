package com.spookyx.xploitserver5;


import android.app.Activity;
import android.os.AsyncTask;
import android.util.Log;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.lang.ref.WeakReference;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.zip.ZipEntry;
import java.util.zip.ZipFile;
import java.util.zip.ZipInputStream;

import spookyx.lib.tools.AlertDialogBox;
import spookyx.lib.tools.Misc;


public class Unpack extends AsyncTask<String, Integer, Integer>
{

    final static int UNPACK_DONE    =  0;
    final static int UNPACK_ERR     = -1;
    final static int NO_EXPLOIT     = -2;

    private WeakReference<Activity> _weakActivity;

    private String _zipFile;
    private String _destDir;

    private int result;

    private int progressStatus;
    private int archiveFileCount;

    private Misc misc = new Misc();

    private ArrayList<String> fileNameList;

    private AlertDialogBox progressBar;

    Unpack( Activity activity, String zipFile, String destDir )
    {
        _weakActivity = new WeakReference<>( activity );

        _zipFile    = zipFile;
        _destDir    = destDir;

    }


    private boolean verifyArchive( String zipFile )
    {
        fileNameList = new ArrayList<>();

        Log.i("zobbi", "Zip file : " + _zipFile );

        try
        {
            // Create a Zip File
            ZipFile zip_file = new ZipFile( zipFile );

            Enumeration<? extends ZipEntry> e = zip_file.entries();

            while( e.hasMoreElements() )
            {
                ZipEntry entry = e.nextElement();

                fileNameList.add( entry.getName() );
            }

            String zipComment = zip_file.getComment();

            Log.i("zobbi", "Zip comment : " + zipComment );

            if ( zipComment != null )
            {
                if ( !zipComment.equalsIgnoreCase("exploit" ) )
                {
                    Log.i("zobbi", "Zip comment : " + zipComment );

                    zip_file.close();

                    return false;
                }

            }
            else
            {
                zip_file.close();

                return false;
            }

        }
        catch( Exception ex )
        {
            ex.printStackTrace();

            return false;

        }

        return true;
    }

    @Override
    protected void onPreExecute()
    {
        super.onPreExecute();

        progressStatus      = 0;
        archiveFileCount    = 0;

        progressBar = new AlertDialogBox( _weakActivity.get() );

        try
        {
            ZipFile zip = new ZipFile( _zipFile );
            archiveFileCount = zip.size();

            Log.i("zobbi", "Archive file count : " + archiveFileCount );

        }
        catch ( IOException e )
        {
            result = UNPACK_ERR;

            e.printStackTrace();
        }

        if ( verifyArchive( _zipFile ) )
        {
            Log.i("zobbi","Verify exploit archive SUCCESS..." );
        }
        else
        {
            Log.i("zobbi","Verify exploit archive FAILED..." );
            result = NO_EXPLOIT;
            cancel(true );

            return;
        }

        progressBar.createProgressDialog( _weakActivity.get(), R.drawable.extracted, archiveFileCount,
                "Unpack Exploit Archive","Extracting exploit..." );

    }

    @Override
    protected Integer doInBackground( String... location )
    {
        //is = context.getResources().openRawResource( resourceId );
        //zis = new ZipInputStream( new BufferedInputStream( is ) );

        if ( result == NO_EXPLOIT )
        {
            progressBar.closeProgressDialog();

            return getResult();
        }

        int count;
        final byte[] buffer = new byte[2048];

        try
        {
            FileInputStream is = new FileInputStream( _zipFile );
            ZipInputStream zis = new ZipInputStream( is );

            ZipEntry ze;

            while ( ( ze = zis.getNextEntry() ) != null )
            {
                File file = new File( _destDir, ze.getName());

                File dir = ze.isDirectory() ? file : file.getParentFile();

                ++progressStatus;

                publishProgress( progressStatus );

                if ( dir != null )
                {
                    if ( !dir.isDirectory() && !dir.mkdirs() )
                        Log.i("zobbi","Failed to ensure directory: " + dir.getAbsolutePath());
                }

                if ( ze.isDirectory() )
                    continue;

                FileOutputStream fileOutputStream = new FileOutputStream( file );

                while ( ( count = zis.read( buffer ) ) != -1 )
                {
                    fileOutputStream.write( buffer,0, count );

                }

                zis.closeEntry();
                fileOutputStream.close();

                int progressTime = 100 - Math.round( archiveFileCount * 1.25f );
                progressTime = ( progressTime < 5 ) ? 5 : progressTime;

                Log.i( "zobbi", "progressTime : " + progressTime );

                misc.setSleep( progressTime );

                result = UNPACK_DONE;

            }

            zis.close();
            is.close();

        }
        catch ( IOException ex )
        {
            ex.printStackTrace();

            result = UNPACK_ERR;
        }

        return 0;
    }

    @Override
    protected void onProgressUpdate( Integer... values )
    {
        int percentProgress = 0;

        if ( values[0] != 0 )
            percentProgress = ( progressStatus * 100 ) / archiveFileCount;

        progressBar.showProgressDialog( values[0], "file archive extracted : "
                        + values[0] + " / " + archiveFileCount + " files." +
                        "\nExtracted file name : "  + fileNameList.get( values[0] - 1 )
                        ,"Percent progression : "  + percentProgress + " %" );

        super.onProgressUpdate( values );

    }

    @Override
    protected void onPostExecute( Integer progress )
    {

        progress = result;

        super.onPostExecute( progress );

        misc.setSleep( 750 );

        progressBar.closeProgressDialog();

        misc.ShowToastThread( _weakActivity.get(),"Exploit archive unpack SUCCESS", misc.LONG );

    }

    int getResult()
    {
        return result;
    }

}
