package com.spookyx.xploitserver5;

import android.annotation.SuppressLint;
import android.annotation.TargetApi;
import android.app.Activity;
import android.app.AlertDialog;
import android.content.BroadcastReceiver;
import android.content.Context;
import android.content.DialogInterface;
import android.content.Intent;
import android.content.IntentFilter;
import android.content.SharedPreferences;
import android.content.pm.ActivityInfo;
import android.content.pm.PackageManager;
import android.net.wifi.WifiManager;
import android.os.Build;
import android.os.Bundle;
import android.os.Handler;
import android.os.Message;
import android.text.Editable;
import android.text.InputFilter;
import android.text.TextWatcher;
import android.text.method.ScrollingMovementMethod;
import android.util.Log;
import android.view.LayoutInflater;
import android.view.Menu;
import android.view.MenuItem;
import android.view.View;
import android.view.ViewGroup;
import android.view.Window;
import android.widget.AdapterView;
import android.widget.ArrayAdapter;
import android.widget.CompoundButton;
import android.widget.EditText;
import android.widget.ImageView;
import android.widget.Spinner;
import android.widget.Switch;
import android.widget.TextView;

import androidx.annotation.NonNull;
import androidx.appcompat.app.ActionBar;
import androidx.appcompat.app.AppCompatActivity;
import androidx.appcompat.view.ActionMode;
import androidx.appcompat.view.menu.MenuBuilder;
import androidx.appcompat.widget.Toolbar;
import androidx.core.view.MenuCompat;
import androidx.localbroadcastmanager.content.LocalBroadcastManager;
import androidx.preference.PreferenceManager;
import androidx.recyclerview.widget.DefaultItemAnimator;
import androidx.recyclerview.widget.LinearLayoutManager;
import androidx.recyclerview.widget.RecyclerView;
//import androidx.recyclerview.widget.StaggeredGridLayoutManager;
//import com.google.android.material.snackbar.Snackbar;

import java.io.File;

import java.util.ArrayList;
import java.util.List;
import java.util.Objects;

import spookyx.lib.fileExplorer.FileExplorer;
import spookyx.lib.tools.AlertDialogBox;
import spookyx.lib.tools.AndroidVersion;
import spookyx.lib.tools.FileOp;
import spookyx.lib.tools.Misc;
import spookyx.lib.tools.StoragePermission;
import spookyx.lib.tools.Toasty;
import spookyx.lib.tools.WifiTools;

import com.github.clans.fab.FloatingActionMenu;
import com.github.clans.fab.FloatingActionButton;


// TODO :   Verify if HotSpot activate

@SuppressWarnings("unused")
public class MainActivity extends AppCompatActivity implements Adapter.ViewHolder.ClickListener
{
    //private static final String TAG = MainActivity.class.getSimpleName();
    private static final String TAG = "zobbi";

    final private static int TITLE_DIALOG_BOX       = 1;
    final private static int SUBTITLE_DIALOG_BOX    = 2;

    private static final int SETTINGS_ACTION                    = 100;
    private static final int REQUEST_PATH                       = 200;
    private static final int REQUEST_PATH_EXEC_PAYLOAD          = 300;
    private static final int REQUEST_PATH_EXEC_PAYLOAD_SERVER   = 400;

    private static final int REQUEST_CODE_ACCESS_ALL_NET        = 512;

    SharedPreferences       preferences;

    private ActionMode      actionMode;

    private ImageView       onAirIcon;
    private Adapter         adapter;
    private RecyclerView    recyclerView;

    private WifiTools       wifiTools;

    TextView textLogCtrl;
    TextView textConnect;

    String title;
    String exploitItemFolder;

    AndroidVersion androidVersion = new AndroidVersion();

    private FileOp  fileOp  = new FileOp();
    private Utils   utils   = new Utils();
    private Misc    misc    = new Misc();

    // TODO : Storage Permission
    private StoragePermission storagePermission;

    private ActionModeCallback actionModeCallback = new ActionModeCallback();

    boolean stopAction  = false;
    boolean startAction = false;

    private boolean toggleLogCat;

    long lastPressTime  = 0;

    final boolean[] isEnableHotSpot = { false };

    private int selectNetwork;


    private void initServer()
    {

        if ( adapter.getItemList() != null )
        {

            utils.SaveSetting( getApplicationContext(),"HASINIT",true );

            ////if ( Utils.isSvcRunning(this, xService.class ) )
            if ( xService.is_xService_Running )
            {
                textConnect.setText( utils.GetSetting(this,"HOSTADDR", getString(R.string.start_server ) ) );
            }
            else
                {
                    textConnect.setText( R.string.start_server );
                }

        }
        else
            {
                misc.PrintAppendHtmlLog( textLogCtrl, R.color.alertColor,16,"Failed to add item exploit directory" );
                misc.PrintAppendHtmlLog( textLogCtrl, R.color.alertColor,16,"Please add at least one exploit item" );

            }

    }

    ExecutePayload executePayload;

    //private Handler mHandler;
    Handler mHandler  = new Handler( new Handler.Callback()
    {
        @Override
        public boolean handleMessage( @NonNull Message message )
        {
            switch ( message.what )
            {
                case WifiApUtil.MESSAGE_AP_STATE_ENABLED :

                    String ssid = WifiApUtil.getInstance( MainActivity.this ).getValidApSSID();
                    String pw = WifiApUtil.getInstance( MainActivity.this ).getValidPassword();
                    int security = WifiApUtil.getInstance( MainActivity.this ).getValidSecurity();
                    Log.i("zobbi","wifi热点开启成功 : \n"
                            + "SSID = " + ssid + "\n"
                            + "Password = " + pw +"\n"
                            + "Security = " + security );

                    break;

                case WifiApUtil.MESSAGE_AP_STATE_FAILED :

                    Log.i("zobbi","Wifi Hotspot FAILED" );

                    break;

                default:
                    break;
            }

            return false;
        }

    } );


    @Override
    protected void onCreate( Bundle savedInstanceState )
    {
        super.onCreate( savedInstanceState );

        selectNetwork = 0;

        setRequestedOrientation( ActivityInfo.SCREEN_ORIENTATION_PORTRAIT );

        requestWindowFeature( Window.FEATURE_NO_TITLE );

        setContentView( R.layout.activity_main );

        textConnect = findViewById( R.id.textUrl );
        textLogCtrl = findViewById( R.id.textLog );

        preferences = PreferenceManager.getDefaultSharedPreferences(this );

        toggleLogCat = preferences.getBoolean("useAppLog",true );

        /*
        //  Set App Theme
         */
        String themeName = preferences.getString("theme", "Light Theme");
        if ( themeName.equals( "Light Theme" ) )
        {
            setTheme( R.style.ThemeLight );
        }
        else if ( themeName.equals( "Dark Theme" ) )
        {
            setTheme( R.style.ThemeDarker );
        }


        Toolbar toolbar = findViewById( R.id.toolbar );
        setSupportActionBar( toolbar );

        ActionBar actionBar = getSupportActionBar();
        if ( actionBar != null )
        {
            actionBar.setHomeButtonEnabled( true );
            actionBar.setDisplayHomeAsUpEnabled( true );
            actionBar.setIcon( R.drawable.ic_launcher );

            //actionBar.setHomeAsUpIndicator(R.drawable.about_icon);
            //actionBar.setBackgroundDrawable( new ColorDrawable( Color.parseColor("#5e9c00" ) ) );

        }


        adapter = new Adapter(this, getApplicationContext() );

        recyclerView = findViewById( R.id.exploit_list );
        recyclerView.setAdapter( adapter );
        recyclerView.setItemAnimator( new DefaultItemAnimator() );
        recyclerView.setLayoutManager( new LinearLayoutManager(this ) );
        //recyclerView.setLayoutManager( new StaggeredGridLayoutManager(3, StaggeredGridLayoutManager.VERTICAL ) );


        onAirIcon = findViewById( R.id.AntennaIcon );

        /*
        executePayload = new ExecutePayload( getApplicationContext() );

        onAirIcon.setOnClickListener( new ImageButton.OnClickListener()
        {
            @Override
            public void onClick( View view )
            {
                Log.i( TAG, "Image Click !" );

                executePayload.StartServerPayload();

            }

        } );

         */

        textLogCtrl.setMovementMethod( new ScrollingMovementMethod() );

        wifiTools = new WifiTools( getApplicationContext() );


        //selectNetwork = utils.GetSetting( getApplicationContext(),"selectNetwork",0 );

        // Spinner element
        final Spinner spinner = findViewById( R.id.selectNetworkSpinner );

        // Spinner Drop down elements
        List<String> categories = new ArrayList<>();
        categories.add( "No Network" );
        categories.add( "Use Wifi Network" );
        categories.add( "Start tethering options" );
        categories.add( "Start tethering with quick options" );

        // Creating adapter for spinner
        //ArrayAdapter<String> dataAdapter = new ArrayAdapter<>(this, R.layout.textview_with_background, categories );
        ArrayAdapter<String> dataAdapter = new ArrayAdapter<>(this, android.R.layout.simple_spinner_item, categories );
        // Drop down layout style - list view
        //dataAdapter.setDropDownViewResource( R.layout.textview_with_background );
        dataAdapter.setDropDownViewResource( android.R.layout.simple_spinner_dropdown_item );

        // attaching data adapter to spinner
        spinner.setAdapter( dataAdapter );

        //spinner.setEnabled( false );
        //spinner.setSelection( selectNetwork,false );
        //spinner.setEnabled( true );

        spinner.setSelection(0,false );

        spinner.setOnItemSelectedListener( new AdapterView.OnItemSelectedListener()
        {

            @Override
            public void onItemSelected( AdapterView<?> parent, View view, int position, long id )
            {
                selectNetwork = position;

                Log.i( "zobbi", "selected : " + selectNetwork  );

                setSelectNetwork( selectNetwork );
                //utils.SaveSetting( getApplicationContext(),"selectNetwork", selectNetwork );

            }

            @Override
            public void onNothingSelected( AdapterView<?> parent )
            {
                Log.i( "zobbi", "selected : " + selectNetwork  );
            }

        } );


        final WifiManager wifiMgr = (WifiManager) getSystemService( Context.WIFI_SERVICE );
        isEnableHotSpot[0] = wifiTools.isWifiApEnabled( wifiMgr );

        final boolean[] enableListView = { true };

        misc.PrintHtmlLog( textLogCtrl, R.color.colorBlue,16,"Starting " + getString( R.string.app_name ) );

        adapter.setEnableListView( true );

        wifiTools = new WifiTools( getApplicationContext() );

        final Switch aSwitch = findViewById( R.id.serverStartSW );

        aSwitch.setChecked( xService.is_xService_Running );

        aSwitch.setOnCheckedChangeListener( new CompoundButton.OnCheckedChangeListener()
        {
            //int state = wifiTools.statusWifiApEnable( getApplicationContext() );

            @Override
            public void onCheckedChanged( CompoundButton buttonView, boolean isChecked )
            {
                // TODO if possible :
                /*
                if ( isChecked )
                {
                    utils.enableWiFi( getApplicationContext(),true );

                    //isEnableWifi = saveWifiState;
                }
                else
                {
                    if ( ( saveWifiState ) && utils.checkWifiOnAndConnected( getApplicationContext() ) )
                    {
                        utils.enableWiFi( getApplicationContext(), isEnableWifi );



                    }
                }

                 */

                boolean isEnableWifi = wifiTools.checkWifiOnAndConnected( getApplicationContext() );

                enableListView[0] = true;

                if ( isChecked )
                {
                    Log.i( "zobbi", "isEnableHotSpot : " + isEnableHotSpot[0] );
                    //Log.i( "zobbi", "statusWifiApEnable : " + state );

                    if ( adapter.getSelectedItemCount() == 1
                            && adapter.getSelectedItemCount() != 0
                            && ( isEnableWifi || isEnableHotSpot[0] ) )
                    {
                        onAirIcon.setImageResource( R.drawable.on_air );

                        Intent intent = new Intent( getApplicationContext(), xService.class );
                        startService( intent );

                        misc.PrintAppendLog( textLogCtrl, R.color.colorBlue,14, getString( R.string.start_server ) );

                        textConnect.setTextColor ( 0xFF33b5e5 );
                        textConnect.setText( R.string.start_server );

                        enableListView[0] = false;

                    }
                    else
                        {
                            String msg = "Select : \n";

                            if ( adapter.getSelectedItemCount() == 0 )
                            {
                                misc.PrintAppendHtmlLog( textLogCtrl, R.color.alertColor,16,"Select ONE Item..." );
                                msg += "- One Item in list exploit...\n";
                            }

                            if ( !isEnableWifi || !isEnableHotSpot[0] )
                            {
                                misc.PrintAppendHtmlLog( textLogCtrl, R.color.alertColor,16,"Enable Network if you want..." );
                                msg += "- Enable Network...";

                                spinner.setFocusable( true );
                                spinner.requestFocus();
                            }

                            Toasty.showToast( getApplicationContext(), msg, Toasty.Error );

                            /*
                            String strWifiEnable;

                            //if ( !isEnableWifi )
                                strWifiEnable = !isEnableWifi ? "\n\nDo you want Enable Wifi" : "";

                            final AlertDialogBox alertDialogBox = new AlertDialogBox(MainActivity.this );
                            AlertDialog.Builder builder = alertDialogBox.createSimpleDialogOK(
                                     R.drawable.warning_icon,
                                    "Warning : Unable to Start Server :\n",
                                    " - Select one item.\n - Enable Wifi or hotspot." + strWifiEnable );

                            enableListView[0] = true;

                            //if ( !( isEnableWifi ) || isEnableHotSpot ) )
                            if ( !isEnableWifi )
                            {
                                builder.setPositiveButton("YES", new DialogInterface.OnClickListener()
                                {

                                    @Override
                                    public void onClick(DialogInterface dialog, int which) {
                                        alertDialogBox.dismiss();

                                        EnableWifi taskEnableWifi = new EnableWifi(MainActivity.this );
                                        taskEnableWifi.execute();
                                        enableListView[0] = true;

                                    }

                                } );
                                builder.setNegativeButton("No", new DialogInterface.OnClickListener()
                                {

                                    @Override
                                    public void onClick(DialogInterface dialog, int which) {
                                        // Just display Warming AlertBox
                                        alertDialogBox.dismiss();
                                        enableListView[0] = true;
                                    }

                                } );
                            }
                            else
                                builder.setPositiveButton("OK", new DialogInterface.OnClickListener() {
                                    @Override
                                    public void onClick(DialogInterface dialog, int which) {
                                        alertDialogBox.dismiss();
                                        enableListView[0] = true;

                                    }
                                } );

                            builder.show();

                            aSwitch.setChecked( false );
                            enableListView[0] = true;

                             */

                        }

                }
                else
                {
                    onAirIcon.setImageResource( R.drawable.antenna );

                    Intent intent = new Intent( getApplicationContext(), xService.class );
                    stopService( intent );

                    misc.PrintAppendHtmlLog( textLogCtrl, R.color.colorBlue,16, getString( R.string.stop_server ) );
                    textConnect.setTextColor ( 0xFF33b5e5 );
                    textConnect.setText( R.string.stop_server );

                    enableListView[0] = true;

                }

                adapter.setEnableListView( !isChecked || enableListView[0]);
                spinner.setEnabled( !isChecked );

            }

        } );



        //final String defaultArchiveFolder = utils.getDefaultArchiveFolder( getApplicationContext() );

        final FloatingActionMenu fab = findViewById( R.id.FloatingActionMenu1 );
        final FloatingActionButton menu1 = findViewById( R.id.subFloatingMenu1 );
        final FloatingActionButton menu2 = findViewById( R.id.subFloatingMenu2 );
        final FloatingActionButton menu3 = findViewById( R.id.subFloatingMenu3 );

        menu1.setOnClickListener( new View.OnClickListener()
        {
            @Override
            public void onClick( View v )
            {
                createEditItemDialog(MainActivity.this, R.drawable.edit_2,
                        "Exploit Title",
                        "Add title to exploit item",
                        " Note: App create folder exploit with this title.",
                        20, TITLE_DIALOG_BOX );

            }

        } );

        menu2.setOnClickListener( new View.OnClickListener()
        {

            @Override
            public void onClick( View v )
            {
                Intent intent = new Intent( getApplicationContext(), FileExplorer.class );
                intent.putExtra("fileRoot", utils.getDefaultArchiveFolder( getApplicationContext() ) );
                intent.putExtra("fileFilter","bin" );

                startActivityForResult( intent, REQUEST_PATH_EXEC_PAYLOAD );
                fab.close(true );

            }

        } );

        menu3.setOnClickListener( new View.OnClickListener()
        {

            @Override
            public void onClick( View v )
            {
                Intent intent = new Intent( getApplicationContext(), FileExplorer.class );
                intent.putExtra("fileRoot", utils.getDefaultArchiveFolder( getApplicationContext() ) );
                intent.putExtra("fileFilter","bin" );

                startActivityForResult( intent, REQUEST_PATH_EXEC_PAYLOAD_SERVER );
                fab.close(true );

            }

        } );


        // TODO : Enable Logcat
        /*
         *  Enable /Disable Logcat
         */
        setEnableLogcat(true, toggleLogCat );


        /*
        ViewGroup.LayoutParams params = recyclerView.getLayoutParams();
        int exploitListHeight = params.height;
        int exploitListNewHeight = exploitListHeight;

        boolean useAppLog = preferences.getBoolean("useAppLog",true );
        if ( useAppLog )
        {
            textLogCtrl.setVisibility( View.VISIBLE );
        }
        else
        {
            exploitListNewHeight = exploitListHeight + 250;

            textLogCtrl.setVisibility( View.GONE );
        }

        params.height = exploitListNewHeight;
        recyclerView.setLayoutParams( params );
        recyclerView.requestLayout();

         */


        /*
         *  Enable automatic Wifi on start App
         */
        if ( preferences.getBoolean("enableAutoWifi",false ) && !wifiTools.checkWifiOnAndConnected( getApplicationContext() ) )
        {
            EnableWifi taskEnableWifi = new EnableWifi(MainActivity.this );
            taskEnableWifi.execute();
        }


        /*
        //  Service
         */
        if ( utils.GetSetting(this,"HASINIT",false ) )
        {
            Bundle extras = getIntent().getExtras();

            if ( extras != null )
            {
                String mAction = extras.getString("Action" );

                if ( mAction != null && mAction.equals( "Stop" ) )
                {
                    stopAction = true;
                }
                else if ( mAction != null && mAction.equals( "Start" ) )
                {
                    startAction = true;
                }
            }
        }

        if ( xService.is_xService_Running )
        {
            if ( stopAction )
            {
                Intent intent = new Intent(this, xService.class );
                stopService( intent );
                finish();

            }

        }
        else if ( startAction )
        {
            Intent intent = new Intent(this, xService.class );
            startService( intent );
            finish();

        }

        //setSelectNetwork( selectNetwork );

        storagePermission = new StoragePermission(MainActivity.this );
        storagePermission.setStoragePermission();

        /*
        storagePermission.setUriStoragePermission();
        if ( storagePermission.needPermissions )
        {
            // show a dialog explaining that you need permission to create the directory
            // here, we will just launch to chooser (what you need to do after showing the dialog)
            AlertDialogBox alertDialogBox = new AlertDialogBox( MainActivity.this );
            AlertDialog.Builder builder = alertDialogBox.createSimpleDialogOK( R.drawable.storage_permission_icon,
                    "Need storage permission.",
                    "In next screen,\nyou need select SD Card Storage,\nthen click SELECT" );

            builder.setPositiveButton("Ok", new DialogInterface.OnClickListener()
            {
                @Override
                public void onClick( DialogInterface dialog, int which )
                {
                    startActivityForResult( new Intent( Intent.ACTION_OPEN_DOCUMENT_TREE ),
                            storagePermission.REQUEST_CODE_URI_STORAGE_PERMISSION );

                }


            } );
            builder.show();

            Log.i( "zobbi", "Create AlertBox for PERMISSION" );

            //startActivityForResult( new Intent( Intent.ACTION_OPEN_DOCUMENT_TREE ), storagePermission.REQUEST_CODE_URI_STORAGE_PERMISSION );

            Log.i("zobbi", "AAAAAAA : needPermissions YES 2");
        }
        else
        {
            //documentFile.createDirectory( "AA" );
            Log.i("zobbi", "AAAAAAA : needPermissions NO 2");

        }
        */

        ////if ( android.os.Build.VERSION.SDK_INT > Build.VERSION_CODES.M )
        if ( androidVersion.getCurrentAndroidVersion() >= androidVersion.MarshMallow )
        {
            SetPermissions();
        }
        else
        {
            initServer();
        }


        WifiApUtil.getInstance( getApplicationContext() );
        WifiApUtil.getInstance( this ).registerHandler( mHandler );

        if ( Build.VERSION.SDK_INT >= Build.VERSION_CODES.O )
            WifiApUtil.getInstance( MainActivity.this ).turnOnHotspot();


        if ( !utils.setExploitStorageDir( getApplicationContext() ) )
        {
            misc.PrintHtmlLog( textLogCtrl, R.color.alertColor,16,"Failed to create dir" );
        }

        if ( !utils.setDefaultArchiveFolder( getApplicationContext() ) )
        {
            misc.PrintHtmlLog( textLogCtrl, R.color.alertColor,16,"Failed to retrieve folder" );
        }


    }

    void setSelectNetwork( int position )
    {
        switch ( position )
        {
            case 0 :

                break;

            case 1 :
                if ( !wifiTools.checkWifiOnAndConnected( getApplicationContext() ) )
                {
                    EnableWifi taskEnableWifi = new EnableWifi(MainActivity.this );
                    taskEnableWifi.execute();
                }

                break;

            case 2 :

                if ( !isEnableHotSpot[0] )
                {
                    /*
                    final Intent intentTetheringOptions = new Intent( Intent.ACTION_MAIN,null );
                    intentTetheringOptions.addCategory( Intent.CATEGORY_LAUNCHER );

                    //Build.BRAND

                    // "com.android.settings.Settings$WifiApSettingsActivity"
                    // "com.android.settings.Settings$TetherWifiSettingsActivity"
                    // "com.android.settings.TetherSettings"
                    final ComponentName componentName = new ComponentName("com.android.settings",
                            "com.android.settings.TetherSettings" );

                    intentTetheringOptions.setComponent( componentName );
                    intentTetheringOptions.addCategory( Intent.CATEGORY_LAUNCHER );
                    intentTetheringOptions.setFlags( Intent.FLAG_ACTIVITY_NEW_TASK );

                    startActivity( intentTetheringOptions );
                    */

                    final AlertDialogBox alertDialogBox = new AlertDialogBox(MainActivity.this );

                    AlertDialog.Builder builder = alertDialogBox.createSimpleDialogOK(
                            R.drawable.information_3,"Enable tethering network...",
                            getApplicationContext().getString( R.string.tethering_settings ) );

                    builder.setPositiveButton("YES", new DialogInterface.OnClickListener()
                    {
                        @Override
                        public void onClick( DialogInterface dialog, int which )
                        {
                            dialog.dismiss();

                            Intent tetherSettings = new Intent();
                            tetherSettings.setClassName("com.android.settings",
                                                        "com.android.settings.TetherSettings" );
                            startActivity( tetherSettings );

                        }

                    } );
                    builder.setNegativeButton("NO", new DialogInterface.OnClickListener()
                    {
                        @Override
                        public void onClick( DialogInterface dialog, int which )
                        {
                            dialog.dismiss();
                        }

                    } );
                    builder.show();


                }

                break;

            case 3 :

                Log.i("zobbi","Start quick options" );

                if ( !preferences.getBoolean("avoidTetheringMessage",false ) || !isEnableHotSpot[0] )
                {
                    final AlertDialogBox alertDialogBox = new AlertDialogBox(MainActivity.this );

                    AlertDialog.Builder builder = alertDialogBox.createSimpleDialogOK(
                            R.drawable.information_3,"Enable tethering network",
                            getApplicationContext().getString( R.string.avoid_tethering_message ) );

                    builder.setPositiveButton("OK", new DialogInterface.OnClickListener()
                    {
                        @Override
                        public void onClick( DialogInterface dialog, int which )
                        {
                            alertDialogBox.dismiss();
                        }

                    } );
                    builder.show();

                }

                break;

        }

    }

    void setEnableLogcat( boolean inhibit, boolean enableLogcat )
    {
        ViewGroup.LayoutParams params = recyclerView.getLayoutParams();

        int exploitListHeight = params.height;
        int exploitListNewHeight;

        if ( !inhibit )
        {
            if ( !enableLogcat )
            {
                exploitListNewHeight = exploitListHeight - 250;

                textLogCtrl.setVisibility (View.VISIBLE );
            }
            else
                {
                    exploitListNewHeight = exploitListHeight + 250;

                    textLogCtrl.setVisibility( View.GONE );
                }
        }
        else
            {
                if ( enableLogcat )
                {
                    exploitListNewHeight = exploitListHeight;

                    textLogCtrl.setVisibility( View.VISIBLE );
                }
                else
                    {
                        exploitListNewHeight = exploitListHeight + 250;

                        textLogCtrl.setVisibility( View.GONE );
                    }

            }

        params.height = exploitListNewHeight;
        recyclerView.setLayoutParams(params);
        recyclerView.requestLayout();

    }

    @SuppressLint( "InflateParams" )
    public void createEditItemDialog( Activity activity, int icon, String titleDialog,
                                      String subtitleDialog, final String msg,
                                      final int charMaxLength, final int changeDialogBox )
    {

        //final List<String> listEdit = new ArrayList<>();

        AlertDialog.Builder builder = new AlertDialog.Builder( activity );

        //LayoutInflater inflater = LayoutInflater.from( getApplicationContext() );
        LayoutInflater inflater = this.getLayoutInflater();

        final View subView = inflater.inflate( R.layout.item_dialogbox,null );

        final EditText etComments   = subView.findViewById( R.id.etComments );
        final TextView message      = subView.findViewById( R.id.alert_message );

        // maximum  character length
        etComments.setFilters( new InputFilter[]
                {
                        new InputFilter.LengthFilter( charMaxLength )

                } );

        message.setText( msg );

        etComments.setHint( "Set at least five characters" );

        builder.setView( subView );
        builder.setIcon( icon );       // R.drawable.about_icon
        builder.setTitle( titleDialog );
        builder.setMessage( subtitleDialog );
        builder.setCancelable( false );

        /*
        final TextView Title = new TextView( mActivity );
        Title.setTextColor( Color.CYAN );
        Title.setText("Title");
        Title.setPadding(10, 10, 10, 10);
        Title.setGravity(Gravity.CENTER);
        Title.setTextColor(Color.WHITE);
        Title.setTextSize(20);
        builder.setCustomTitle( Title );
        */

        builder.setPositiveButton("OK", new DialogInterface.OnClickListener()
        {
            public void onClick( DialogInterface dialog, int whichButton )
            {
                String data = String.valueOf( etComments.getText() );

                if ( data.isEmpty() )
                {
                    misc.PrintAppendHtmlLog( textLogCtrl, R.color.alertColor,16,"Please enter a least 1 character ( max 10 )" );

                    dialog.cancel();

                    return;
                }

                if ( changeDialogBox == TITLE_DIALOG_BOX )
                    sendTitleDialogData( data );
                else if ( changeDialogBox == SUBTITLE_DIALOG_BOX )
                    sendSubTitleDialogData( data );

                dialog.dismiss();

            }

        } );

        final AlertDialog alert = builder.create();
        alert.show();

        alert.getButton( AlertDialog.BUTTON_POSITIVE ).setEnabled( false );

        etComments.addTextChangedListener( new TextWatcher()
        {

            @Override
            public void beforeTextChanged( CharSequence charSequence, int start, int count, int after )
            {

            }

            @Override
            public void onTextChanged( CharSequence charSequence, int start, int count, int after )
            {
                //message.setText( String.format( Locale.ENGLISH,"%s Char Left : %d",message.getText(), ( charMaxLength - count ) ) );
            }

            @Override
            public void afterTextChanged( Editable editable )
            {
                Log.i( "zobbi", "char len : " + editable.length() + " max len : " + charMaxLength );

                if ( editable.length() >= 5 && editable.length() <= charMaxLength ) {
                    alert.getButton(AlertDialog.BUTTON_POSITIVE).setEnabled( true );
                }
                else
                {
                    if ( editable.length() == 0 )
                        etComments.setHint( "Set at least five characters" );

                    alert.getButton( AlertDialog.BUTTON_POSITIVE).setEnabled( false );
                    etComments.setError( "Set between 5 and " + charMaxLength + " characters" );

                }

            }

        } );

    }

    // do something with the data coming from the AlertDialog
    private void sendTitleDialogData( String data )
    {
        title = data;

        Intent intent = new Intent( getApplicationContext(), FileExplorer.class );
        intent.putExtra("fileRoot", utils.getDefaultArchiveFolder( getApplicationContext() ) );
        intent.putExtra("fileFilter","zip" );

        startActivityForResult( intent, REQUEST_PATH );

    }

    // do something with the data coming from the AlertDialog
    private void sendSubTitleDialogData( String subtitleItem )
    {
        Log.i("zobbi","Selected subtitle : " + title );

        adapter.addItem( title, subtitleItem,utils.getExploitStorageDir( getApplicationContext() ) +
                File.separator + title.replace(' ','_' ).toLowerCase() );

        Log.i("zobbi","Selected subtitle : " + subtitleItem );

        utils.createItemsXml(utils.getExploitStorageDir( getApplicationContext() ) +
                File.separator + "exploitItemList.xml", adapter.getItemList() );

        Log.i("zobbi","addItem: " + adapter.getItemCount());

        misc.PrintAppendHtmlLog( textLogCtrl, R.color.colorBlue,16, "Add Exploit Item DONE..." );

    }


    @Override
    protected void onDestroy()
    {
        super.onDestroy();

        LocalBroadcastManager.getInstance( this ).unregisterReceiver( bReceiver );

        WifiApUtil.getInstance( this ).unregisterHandler();

        if ( executePayload != null )
            executePayload.StopServerPayload();

        Log.i( TAG,"EXIT !!!!!!!!!!!!!!!!!!!!!! " );

    }

    @Override
    public void onBackPressed()
    {
        long currentTime = System.currentTimeMillis();

        if ( ( currentTime - lastPressTime ) < 2000 )
            finish();
        else
            {
                misc.ShowToast(this,"Press again to exit", misc.CENTER,0,  misc.SHORT );

                lastPressTime = currentTime;
            }

    }

    @Override
    protected void onResume()
    {
        super.onResume();

        // TODO : Test if HotSpot is enable live change see

        ////LocalBroadcastManager.getInstance( this ).registerReceiver( bReceiver, new IntentFilter("android.net.conn.TETHER_STATE_CHANGED" ) );
        ////LocalBroadcastManager.getInstance( this ).registerReceiver( bReceiver, new IntentFilter("android.net.wifi.WIFI_AP_STATE_CHANGED" ) );

        IntentFilter filter = new IntentFilter("android.net.wifi.WIFI_AP_STATE_CHANGED" );
        registerReceiver( bReceiver, filter );

        LocalBroadcastManager.getInstance( this ).registerReceiver( bReceiver, new IntentFilter("status" ) );

        ////utils.openItemXml(utils.getExploitStorageDir( getApplicationContext() ) +
        ////        File.separator + "exploitItemList.xml", adapter.getItemList() );

        Log.i( "zobbi", "onResume !!!!!!!!" );
    }

    @Override
    protected void onPause()
    {
        super.onPause();

        LocalBroadcastManager.getInstance( this ).unregisterReceiver( bReceiver );

        utils.createItemsXml(utils.getExploitStorageDir( getApplicationContext() ) +
                File.separator + "exploitItemList.xml", adapter.getItemList() );

        Log.i( "zobbi", "onPause !!!!!!!!" );

    }

    @TargetApi( 23 )
    private void SetPermissions()
    {
        String[] perms = {  "android.permission.INTERNET", "android.permission.ACCESS_WIFI_STATE",
                            "android.permission.CHANGE_WIFI_STATE", "android.permission.ACCESS_NETWORK_STATE",
                            "android.permission.FOREGROUND_SERVICE" };

        requestPermissions( perms, REQUEST_CODE_ACCESS_ALL_NET );

    }


    // TODO : Storage Permission
    @Override
    public void onRequestPermissionsResult( int requestCode, @NonNull String[] permissions, @NonNull int[] grantResults )
    {
        storagePermission.setRequestPermissions( requestCode, grantResults );

        if ( requestCode == REQUEST_CODE_ACCESS_ALL_NET )
        {
            initServer();

            int grantResultsLength = grantResults.length;
            if ( grantResultsLength > 0 && grantResults[0] == PackageManager.PERMISSION_GRANTED )
            {
                Toasty.showToast( getApplicationContext(),"You grant network permission.", Toasty.Info );
            }
            else
            {
                Toasty.showToast( getApplicationContext(),"You denied write external storage permission.", Toasty.Warning );
            }
        }

        super.onRequestPermissionsResult( requestCode, permissions, grantResults );

    }

    // Listen for results.
    @Override
    protected void onActivityResult( int requestCode, int resultCode, Intent data )
    {

        super.onActivityResult( requestCode, resultCode, data );

        Log.i( "zobbi", String.valueOf( requestCode ) );
        Log.i( "zobbi", String.valueOf( resultCode ) );

        /*
        if ( requestCode == SETTINGS_ACTION )
        {


            if ( resultCode == SettingsActivity.RESULT_CODE_THEME_UPDATED )
            {
                Log.i( "zobbi", "RECIEVE THEME UPDATE" );

                finish();
                startActivity( getIntent() );
                return;
            }
        }
        */

        // See which child activity is calling us back.
        if  ( requestCode == REQUEST_PATH && resultCode == RESULT_OK )
        {
            if ( adapter.getItemCount() == -1 )
            {
                return;
            }

            String curFileName  = data.getStringExtra("GetFileName");
            String curPathName  = data.getStringExtra("GetPath");

            utils.saveBrowseArchiveFolder( getApplicationContext(), curPathName );

            String exploitFolderDest = utils.getExploitStorageDir( getApplicationContext() ) +
                    File.separator + title.replace(' ','_' ).toLowerCase();

            /*
            //  Unpack exploit archive function
             */
            Unpack taskUnpack = new Unpack(MainActivity.this,curPathName + curFileName, exploitFolderDest );
            taskUnpack.execute();

            switch ( taskUnpack.getResult() )
            {
                case Unpack.NO_EXPLOIT :

                    misc.PrintAppendHtmlLog(MainActivity.this, R.id.textLog, R.color.alertColor,
                            16,"Enable to find Exploit in archive or wrong file archive" );

                    misc.ShowToast(this,"Wrong exploit archive", misc.CENTER,0, misc.LONG );

                    break;

                case Unpack.UNPACK_ERR :

                    misc.PrintAppendHtmlLog(MainActivity.this, R.id.textLog, R.color.alertColor,
                            16,"Unpack Error..." );

                    misc.ShowToast(this,"Exploit archive unpack FAILED", misc.CENTER,0, misc.LONG );

                    fileOp.deleteDirectory( new File( exploitFolderDest ) );

                    break;

                case Unpack.UNPACK_DONE :

                    misc.PrintAppendHtmlLog(MainActivity.this, R.id.textLog, R.color.colorBlue,
                            16,"Unpack SUCCESS..." );

                    createEditItemDialog(MainActivity.this, R.drawable.edit_2,
                            "Exploit Subtitle",
                            "Add subtitle to exploit item",
                            "Max 34 characters.",
                            34, SUBTITLE_DIALOG_BOX );

                    misc.ShowToast( getApplicationContext(),"New exploit item Added", misc.CENTER,0, misc.SHORT );

                    break;

            }

        }

        if  ( requestCode == REQUEST_PATH_EXEC_PAYLOAD && resultCode == RESULT_OK )
        {
            executePayload = new ExecutePayload( getApplicationContext() );

            //executePayload.StartSendPayload("/storage/emulated/0/xPloitfolder/bin/ps4-hen-vtx.bin",
            executePayload.StartSendPayload(data.getStringExtra("GetPath" ) + data.getStringExtra("GetFileName" ),
                    preferences.getString( this.getString( R.string.defaultIPPayload_key ),"192.168.1.2" ),
                    Integer.valueOf( preferences.getString( this.getString( R.string.defaultPortPayload_key ),"9020" ) ) );

            Toasty.showToast(MainActivity.this,"Sending payload...", Toasty.Success );

        }

        if  ( requestCode == REQUEST_PATH_EXEC_PAYLOAD_SERVER && resultCode == RESULT_OK )
        {
            Log.i( TAG, "REQUEST_PATH_EXEC_PAYLOAD_SERVER" );
            executePayload = new ExecutePayload( getApplicationContext() );
            executePayload.StartServerPayload(data.getStringExtra("GetPath" ) +
                                                        data.getStringExtra("GetFileName" ) );

        }

        // URI External SD Card Storage Permission
        //storagePermission.setRequestExternalStorageUriPermission( requestCode, resultCode, data );


    }


    @Override
    public boolean onCreateOptionsMenu( Menu menu )
    {
        // Inflate the menu; this adds items to the action bar if it is present.
        getMenuInflater().inflate( R.menu.menu_main, menu );

        MenuCompat.setGroupDividerEnabled( menu,true );

        if ( menu instanceof MenuBuilder )
        {
            MenuBuilder menuBuilder = ( MenuBuilder ) menu;
            menuBuilder.setOptionalIconsVisible( true );
        }

        return true;
    }


    // TODO Logcat
    @Override
    public boolean onPrepareOptionsMenu( Menu menu )
    {
        super.onPrepareOptionsMenu( menu );

        boolean useAppLog = preferences.getBoolean("useAppLog",true );

        menu.findItem( R.id.toggleWifi ).setChecked( wifiTools.checkWifiOnAndConnected( getApplicationContext() ) );

        MenuItem toggleLogCtrl = menu.findItem( R.id.toggleLog );

        if ( preferences.getBoolean("useAppLog",true ) )
        {
            toggleLogCtrl.setEnabled( true );
            toggleLogCtrl.setChecked( toggleLogCat );
        }
        else
        {
            toggleLogCtrl.setEnabled( false );
            toggleLogCtrl.setChecked( false );
        }

        return true;
    }

    @Override
    public boolean onOptionsItemSelected( MenuItem item )
    {
        // Handle action bar item clicks here. The action bar will
        // automatically handle clicks on the Home/Up button, so long
        // as you specify a parent activity in AndroidManifest.xml.
        int id = item.getItemId();

        switch ( id )
        {
            case R.id.toggleLog :

                boolean useAppLog = preferences.getBoolean("useAppLog",true );

                item.setChecked( toggleLogCat );

                setEnableLogcat(false, toggleLogCat );

                toggleLogCat = !toggleLogCat;

                break;

            case R.id.clearLog :

                textLogCtrl.setText( null );

                misc.PrintHtmlLog( textLogCtrl, R.color.colorBlue,16,"Starting " + getString( R.string.app_name ) );

                break;

            case R.id.toggleWifi :

                boolean isWifiEnable = wifiTools.checkWifiOnAndConnected( getApplicationContext() );
                item.setChecked( isWifiEnable );

                if ( !isWifiEnable )
                {
                    item.setChecked( true );

                    EnableWifi taskEnableWifi = new EnableWifi(MainActivity.this );
                    taskEnableWifi.execute();
                }
                else
                {
                    wifiTools.enableWiFi( getApplicationContext(),false );
                }

                break;

            case R.id.action_settings :
                Intent intentSettings = new Intent( getApplicationContext(), SettingsActivity.class );
                startActivity( intentSettings );

                break;

            case R.id.action_about :
                Intent intent = new Intent(this, aboutActivity.class);
                startActivity( intent );

                break;

            case R.id.action_finish :
                closeOptionsMenu();
                MainActivity.this.finish();
                closeOptionsMenu();

                break;

                default :
                    return super.onOptionsItemSelected( item );

        }

        return true;
    }


    // TODO single selection
    int previous = -1;

    @Override
    public void onItemClicked( int position )
    {
        Log.i( TAG, "short click : previous position : " + previous + " previous selected : " + adapter.isSelected( previous ) );
        Log.i( TAG, "short click : actual position : " + position + " actual selected : " + adapter.isSelected( position ) );

        if ( previous != -1 && adapter.isSelected( previous ) )
            toggleSelection( previous );

        if ( previous != position )
            toggleSelection( position );

        previous = position;

    }

    @Override
    public boolean onItemLongClicked( int position )
    {
        if ( actionMode == null )
        {
            actionMode = startSupportActionMode( actionModeCallback );

        }

        toggleSelection( position );

        int count = adapter.getSelectedItemCount();

        Log.i( TAG, "Long Click - POSITION : " + position + " Count : " + count );

        if ( count == 0 )
        {
            actionMode.finish();
        }
        else
        {
            actionMode.setTitle( String.valueOf( count ) );
            actionMode.invalidate();
        }

        return true;
    }


    //
    // Toggle the selection state of an item.
    //
    // If the item was the last one in the selection and is unselected, the selection is stopped.
    // Note that the selection must already be started (actionMode must not be null).
    // @param position Position of the item to toggle the selection state
    private void toggleSelection( int position )
    {
        adapter.toggleSelection( position );

        adapter.getItemList().get( position ).setActive( adapter.isSelected( position ) );

    }

    private class ActionModeCallback implements ActionMode.Callback
    {
        private final String TAG = ActionModeCallback.class.getSimpleName();

        @Override
        public boolean onCreateActionMode( @NonNull ActionMode mode, Menu menu )
        {
            mode.getMenuInflater().inflate( R.menu.selected_menu, menu );

            return true;
        }

        @Override
        public boolean onPrepareActionMode( ActionMode mode, Menu menu )
        {

            return false;
        }

        @Override
        public boolean onActionItemClicked( ActionMode mode, MenuItem item )
        {
            String deleteFolder;

            Log.i( "zobbi", "onActionItemClicked" );

            switch ( item.getItemId() )
            {
                case R.id.menu_remove :
                    Log.i( "zobbi", "menu_remove" );

                    List<Integer> selectedItems = adapter.getSelectedItems();

                    Log.i( "zobbi", "selectedItems count : " + selectedItems.size() );

                    int i = 0;
                    while ( i < selectedItems.size() )
                    {
                        deleteFolder = adapter.getItemList().get( selectedItems.get( i ) ).getFolder();

                        Log.i( TAG,"delete selected item path : " + deleteFolder );

                        fileOp.deleteDirectory( new File( deleteFolder ) );

                        ++i;
                    }

                    Log.i( "zobbi","Directory deleted..." );

                    adapter.removeItems( selectedItems );

                    Log.i( "zobbi","Item deleted..." );

                    utils.createItemsXml(utils.getExploitStorageDir( getApplicationContext() ) +
                            File.separator + "exploitItemList.xml", adapter.getItemList() );

                    mode.finish();

                    return true;


                // TODO : delete item and exploit folder
                case R.id.menu_removeAll :

                    Log.i( "zobbi", "menu remove item with delete exploit folder");
                    //adapter.removeItems( adapter.getSelectedItems() );

                    mode.finish();

                    return true;

                default:

                    return false;
            }

        }

        @Override
        public void onDestroyActionMode( ActionMode mode )
        {
            adapter.clearSelection();

            actionMode = null;
        }

    }


    public static final String WIFI_AP_STATE_CHANGED_ACTION = "android.net.wifi.WIFI_AP_STATE_CHANGED";

    public static int WIFI_AP_STATE_DISABLING   = 10;
    public static int WIFI_AP_STATE_DISABLED    = 11;
    public static int WIFI_AP_STATE_ENABLING    = 12;
    public static int WIFI_AP_STATE_ENABLED     = 13;
    public static int WIFI_AP_STATE_FAILED      = 14;

    private BroadcastReceiver bReceiver = new BroadcastReceiver()
    {
        //android.net.conn.TETHER_STATE_CHANGED
        //android.net.wifi.WIFI_AP_STATE_CHANGED

        @Override
        public void onReceive( Context context, Intent intent )
        {
            /*
            if ( intent.getAction().equals( "android.net.wifi.WIFI_AP_STATE_CHANGED" ) )
            {
                //Log.i("zobbi", "availableArray:" + intent.getStringArrayListExtra("availableArray" ).get(0) );
                Log.i("zobbi", "activeArray:" + intent.getStringArrayListExtra("activeArray"));
                Log.i("zobbi", "erroredArray:" + intent.getStringArrayListExtra("erroredArray"));
            }

             */

            if ( Objects.requireNonNull( intent.getAction() ).equals( WIFI_AP_STATE_CHANGED_ACTION ) )
            {
                int apState = intent.getIntExtra(WifiManager.EXTRA_WIFI_STATE,0 );

                Log.i("zobbi", "EXTRA_WIFI_STATE : " + apState );

                if ( apState == WIFI_AP_STATE_ENABLED )
                {
                    // Hotspot AP is enabled
                    Log.i("zobbi","Hotspot AP is enabled" );
                    isEnableHotSpot[0] = true;

                }
                else
                    {
                        // Hotspot AP is disabled/not ready
                        Log.i("zobbi","Hotspot AP is disabled/not ready" );
                        isEnableHotSpot[0] = false;
                    }

            }



            String status = intent.getStringExtra("hostaddr" );

            if ( status != null )
            {
                if ( status.equals( "Failed to start server" ) )
                {
                    misc.ShowToastThread(MainActivity.this,"Failed to start server", misc.SHORT );

                    misc.PrintAppendHtmlLog( textLogCtrl, R.color.alertColor,16,"Failed to start server" );

                    textConnect.setTextColor( 0xFFD50000 );
                    textConnect.setText( R.string.error );
                }
                else
                {
                    misc.ShowToastThread(MainActivity.this,"Server enabled", misc.SHORT );

                    misc.PrintAppendHtmlLog( textLogCtrl, R.color.colorBlue,16,"Server enabled" );
                    misc.PrintAppendHtmlLog( textLogCtrl, R.color.colorBlue,14,"Connect PS4 to " + status );

                    textConnect.setTextColor( 0xFF33b5e5 );
                    textConnect.setText( status );
                }
            }

        }
    };

}