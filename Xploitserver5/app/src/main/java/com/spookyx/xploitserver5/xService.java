package com.spookyx.xploitserver5;

import android.app.IntentService;
import android.app.Notification;
import android.app.NotificationChannel;
import android.app.NotificationManager;
import android.app.PendingIntent;
import android.content.Context;
import android.content.Intent;
import android.graphics.BitmapFactory;
import android.os.Build;
//import android.support.v4.app.NotificationCompat;
//import android.support.v4.content.LocalBroadcastManager;
import android.util.Log;
import android.widget.Toast;

import androidx.core.app.NotificationCompat;
import androidx.localbroadcastmanager.content.LocalBroadcastManager;

import fi.iki.elonen.NanoHTTPD;
import spookyx.lib.tools.WifiTools;

import java.io.IOException;

import static androidx.core.app.NotificationCompat.VISIBILITY_SECRET;

public class xService extends IntentService
{
    NanoHTTPD   webServer;

    String      webHost;

    Utils utils = new Utils();

    public static boolean is_xService_Running = false;

    public xService() {
        super("xService" );
    }

    @Override
    public void onCreate() {
        super.onCreate();
    }

    @Override
    public void onDestroy()
    {
        super.onDestroy();

        utils.ShowToast( getApplicationContext(),"Stopped server", Toast.LENGTH_SHORT );

        stopServer();
    }

    @Override
    protected void onHandleIntent( Intent workIntent )
    {

    }

    @Override
    public int onStartCommand( Intent intent, int flags, int startId )
    {
        startServer();

        int notificationId = 13375;
        String channelId = getString( R.string.start_server );
        String channelName = getString( R.string.start_server );

        if ( Build.VERSION.SDK_INT >= Build.VERSION_CODES.O )
        {

            NotificationChannel channel = new NotificationChannel(channelId, channelName, NotificationManager.IMPORTANCE_MIN);
            channel.setDescription( channelName );

            NotificationManager notificationManager = (NotificationManager) getSystemService(Context.NOTIFICATION_SERVICE);
            if ( notificationManager != null )
            {
                notificationManager.createNotificationChannel( channel );
            }

            NotificationCompat.Builder builder = new NotificationCompat.Builder(this, channelId)
                    .setSmallIcon(R.drawable.svr_enabled)
                    .setLargeIcon(BitmapFactory.decodeResource(this.getResources(),R.mipmap.ic_launcher))
                    .setContentTitle(channelName)
                    .setContentText(webHost)
                    .setOnlyAlertOnce(true)
                    .setPriority(NotificationCompat.PRIORITY_MIN)
                    .setVisibility( VISIBILITY_SECRET );
                    //.setVisibility(-1);

            Intent openApp=new Intent(this, nReceiver.class);
            openApp.setAction("OPEN_APP");
            PendingIntent pOpen = PendingIntent.getBroadcast(this, 0, openApp, PendingIntent.FLAG_UPDATE_CURRENT);
            builder.addAction(R.mipmap.ic_launcher, "Open App", pOpen);

            Intent stopSvr=new Intent(this, nReceiver.class);
            stopSvr.setAction("STOP_SERVER");
            PendingIntent pStopSvr = PendingIntent.getBroadcast(this, 0, stopSvr, PendingIntent.FLAG_UPDATE_CURRENT);
            builder.addAction(R.drawable.svr_disabled, "Stop Server", pStopSvr);

            Notification notification = builder.build();
            notification.flags = Notification.FLAG_NO_CLEAR;
            startForeground(notificationId, notification);

        }
        else
            {
                Intent notificationIntent = new Intent(this, MainActivity.class);
                PendingIntent pendingIntent = PendingIntent.getActivity(this, 0, notificationIntent, 0);

                NotificationCompat.Builder builder = new NotificationCompat.Builder(this, channelId)
                        .setSmallIcon(R.drawable.svr_enabled)
                        .setLargeIcon(BitmapFactory.decodeResource(this.getResources(),R.mipmap.ic_launcher))
                        .setContentIntent(pendingIntent)
                        .setContentTitle(channelName)
                        .setContentText(webHost)
                        .setOnlyAlertOnce(true)
                        .setPriority(NotificationCompat.PRIORITY_MIN)
                        .setVisibility( VISIBILITY_SECRET );
                        //.setVisibility(-1);

                Notification notification = builder.build();
                notification.flags = Notification.FLAG_NO_CLEAR;
                startForeground(notificationId, notification);
            }

        return START_STICKY;
    }

    private void stopServer()
    {
        if ( webServer != null )
        {
            if ( webServer.isAlive() )
            {
                is_xService_Running = false;

                webServer.closeAllConnections();
                webServer.stop();
            }
            webServer = null;

        }

        utils.deleteNotification(this );

    }

    private void startServer()
    {
        String LocIp = WifiTools.getIp();

        int itemPos = Adapter.getSelectItemPos();
        ////payloadFolder = new File( payloadFolder.getAbsolutePath().concat(String.valueOf(adapter.getItemList().get(itemPos).getFolder())) );
        ////Log.i("zobbi", payloadFolder.getAbsolutePath());

        Log.i("zobbi","ITEM POSITION : " + itemPos );

        String payloadFolder = null;

        if ( itemPos != -1 )
        {
            payloadFolder = Adapter.getStaticItemList().get( itemPos ).getFolder();
            Log.i("zobbi", "Folder Payload : " + payloadFolder );


            utils.ShowToast( getApplicationContext(),"Folder Payload : " + payloadFolder,2000 );
        }

        webServer = new Server(8080, payloadFolder );


        try
        {
            webServer.start();

            webHost = "http://" + LocIp + ":8080/index.html";

            is_xService_Running = true;

            utils.SaveSetting(this, webHost );

            updateStatus( webHost );

        }
        catch ( IOException e )
        {
            e.printStackTrace();

            is_xService_Running = false;

            try
            {
                webServer = null;
                webServer = new Server(9090, payloadFolder );
                webServer.start();

                is_xService_Running = true;

                webHost = "http://" + LocIp + ":9090/index.html";

                utils.SaveSetting(this, webHost );

                updateStatus( webHost );

            }
            catch ( IOException ignored )
            {
                utils.SaveSetting(this, "ERROR" );

                webHost = "Failed to start server";
                updateStatus( webHost );

            }

        }

    }

    private void updateStatus ( String msg )
    {
        Intent intent = new Intent ("status" );

        intent.putExtra("hostaddr", msg );

        LocalBroadcastManager.getInstance( this ).sendBroadcast( intent );

    }


}
