package com.spookyx.xploitserver5;


import androidx.annotation.NonNull;
import androidx.appcompat.app.ActionBar;
import androidx.appcompat.app.AppCompatActivity;
import androidx.preference.EditTextPreference;
import androidx.preference.Preference;
import androidx.preference.PreferenceFragmentCompat;
import androidx.preference.PreferenceManager;
import androidx.preference.SwitchPreferenceCompat;

import android.os.Bundle;
import android.text.InputFilter;
import android.widget.EditText;

public class SettingsActivity extends AppCompatActivity
{
    private static Utils utils;

    @Override
    protected void onCreate( Bundle savedInstanceState )
    {
        super.onCreate( savedInstanceState );
        setContentView( R.layout.settings_activity );

        getSupportFragmentManager()
                .beginTransaction()
                .replace( R.id.settings, new SettingsFragment() )
                .commit();

        //Objects.requireNonNull(fragmentCompat.findPreference("theme")).setOnPreferenceChangeListener(new RefreshActivityOnPreferenceChangeListener(RESULT_CODE_THEME_UPDATED));


        ActionBar actionBar = getSupportActionBar();

        if ( actionBar != null )
        {
            actionBar.setDisplayHomeAsUpEnabled( true );
        }

        utils = new Utils();

        utils.setDefaultArchiveFolder( getApplicationContext() );

        //Fragment customFragment = getFragmentManager().findFragmentById( R.id.settings );

        //ListPreference themePref = fragmentCompat.findPreference("theme");

        /*
        if ( themePref != null )
        {
            themePref.setOnPreferenceChangeListener( new RefreshActivityOnPreferenceChangeListener( RESULT_CODE_THEME_UPDATED ) );

        }
        */


    }

    /*
    private class RefreshActivityOnPreferenceChangeListener implements Preference.OnPreferenceChangeListener
    {
        private final int resultCode;

        RefreshActivityOnPreferenceChangeListener( int resultCode )
        {
            this.resultCode = resultCode;
        }

        @Override
        public boolean onPreferenceChange( Preference p, Object newValue )
        {
            setResult( resultCode );

            return true;
        }

    }
    */

    public static class SettingsFragment extends PreferenceFragmentCompat
    {
        SwitchPreferenceCompat externalSDCardDefaultArchiveCtrl;

        @Override
        public void onCreatePreferences( Bundle savedInstanceState, String rootKey )
        {
            setPreferencesFromResource( R.xml.root_preferences, rootKey );

            externalSDCardDefaultArchiveCtrl = findPreference( getString( R.string.enable_ExternalSDCardDefaultArchive_key ) );

            EditTextPreference defaultIPPayloadCtrl = findPreference( getString( R.string.defaultIPPayload_key ) );

            if ( defaultIPPayloadCtrl != null )
                    defaultIPPayloadCtrl.setOnBindEditTextListener( new EditTextPreference.OnBindEditTextListener()
                {
                    @Override
                    public void onBindEditText( @NonNull EditText editText )
                    {
                        InputFilter[] filters = new InputFilter[1];
                        filters[0] = new InputFilter()
                        {

                            @Override
                            public CharSequence filter( CharSequence source, int start, int end,
                                                        android.text.Spanned dest, int dStart, int dEnd )
                            {
                                if ( end > start )
                                {
                                    String destTxt = dest.toString();
                                    String resultingTxt = destTxt.substring( 0, dStart )
                                            + source.subSequence( start, end )
                                            + destTxt.substring( dEnd );

                                    if ( !resultingTxt.matches("^\\d{1,3}(\\.(\\d{1,3}(\\.(\\d{1,3}(\\.(\\d{1,3})?)?)?)?)?)?" ) )
                                    {

                                        return "";
                                    }
                                    else
                                    {
                                        String[] splits = resultingTxt.split("\\.");

                                        for ( String split : splits )
                                        {
                                            if ( Integer.valueOf( split ) > 255 )
                                            {
                                                return "";
                                            }
                                        }

                                    }
                                }
                                return null;
                            }

                        };
                        editText.setFilters( filters );

                    }

            } );

            EditTextPreference defaultPortPayloadCtrl = findPreference( getString( R.string.defaultPortPayload_key ) );

            if ( defaultPortPayloadCtrl != null )
                defaultPortPayloadCtrl.setOnBindEditTextListener( new EditTextPreference.OnBindEditTextListener()
                {
                    @Override
                    public void onBindEditText( @NonNull EditText editText )
                    {
                        InputFilter[] filters = new InputFilter[1];
                        filters[0] = new InputFilter()
                        {

                            @Override
                            public CharSequence filter( CharSequence source, int start, int end,
                                                        android.text.Spanned dest, int dStart, int dEnd )
                            {
                                if ( end > start )
                                {
                                    String destTxt = dest.toString();

                                    String resultingTxt = destTxt.substring( 0, dStart )
                                            + source.subSequence( start, end )
                                            + destTxt.substring( dEnd );

                                    if ( !resultingTxt.matches("^\\d{1,4}?" ) )
                                    {

                                        return "";
                                    }

                                }
                                return null;
                            }

                        };
                        editText.setFilters( filters );

                    }

                } );


            PreferenceManager preferenceManager = getPreferenceManager();

            if ( preferenceManager.getSharedPreferences().getBoolean( getString( R.string.enable_SaveDefaultArchive_key ),false ) )
            {
                externalSDCardDefaultArchiveCtrl.setEnabled( false );
            }
            else
                {
                    externalSDCardDefaultArchiveCtrl.setEnabled( true );
                }


        }

        //InternalFolderSW.setOnPreferenceChangeListener( new RefreshActivityOnPreferenceChangeListener( RESULT_CODE_THEME_UPDATED ) );

        @Override
        public void onResume()
        {

            SwitchPreferenceCompat saveDefaultArchiveCtrl = findPreference( getString( R.string.enable_SaveDefaultArchive_key ) );

            Preference.OnPreferenceChangeListener changeListener = new Preference.OnPreferenceChangeListener()
            {
                final SwitchPreferenceCompat externalSDCardDefaultArchiveCtrl = findPreference( getString( R.string.enable_ExternalSDCardDefaultArchive_key ) );

                public boolean onPreferenceChange( Preference preference, Object newValue )
                {
                    utils.setExploitStorageDir( getContext() );
                    if ( preference.getKey().equals( getString( R.string.enable_SaveDefaultArchive_key ) ) )
                    {
                        if ( externalSDCardDefaultArchiveCtrl != null )
                            externalSDCardDefaultArchiveCtrl.setEnabled( !Boolean.valueOf( String.valueOf( newValue ) ) );

                    }

                    return true;
                }
            };

            if ( saveDefaultArchiveCtrl != null )
                saveDefaultArchiveCtrl.setOnPreferenceChangeListener( changeListener );


            /*
            Preference preference2 = findPreference("theme" );
            if ( preference2 != null )
            {
                preference2.setOnPreferenceChangeListener( new Preference.OnPreferenceChangeListener()
                {
                    private int resultCode;

                    @Override
                    public boolean onPreferenceChange( Preference preference, Object newValue )
                    {
                        setResult( RESULT_CODE_THEME_UPDATED );

                        Log.i( "zobbi", "RESULT_CODE_THEME_UPDATED" );

                        //newValue RESULT_CODE_THEME_UPDATED;

                        //preference.set

                        return false;
                    }

                    private void setResult( int resultCode )
                    {
                        this.resultCode = resultCode;
                    }

                } );
            }
            */

            super.onResume();
        }

    }

}