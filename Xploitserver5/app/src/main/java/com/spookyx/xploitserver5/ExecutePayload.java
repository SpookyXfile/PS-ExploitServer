package com.spookyx.xploitserver5;

import android.content.Context;
import android.os.Environment;
import android.util.Log;

import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStream;
import java.net.ConnectException;
import java.net.Socket;

import fi.iki.elonen.NanoHTTPD;

import spookyx.lib.tools.Toasty;


class ExecutePayload
{

    private NanoHTTPD   webServer;
    private Utils       utils;
    private Context     ctx;


    ExecutePayload( Context context )
    {
        this.utils = new Utils();

        this.ctx = context;

    }

    @SuppressWarnings( { "unused", "SameParameterValue" } )
    private void createResFile( final Context context, final int resourceId, final String fileName, final boolean isLocal )
    {
        new Thread( new Runnable()
        {
            public void run()
            {
                String fPath;

                //if ( isLocal )
                //{
                //    fPath = getDataDir(context) + "/" + fileName;
                //}
                // else
                // {
                fPath = Environment.getExternalStorageDirectory().toString() + context.getString( R.string.payload_folder ) + File.separator + fileName;
                //}

                try
                {
                    InputStream in = ctx.getResources().openRawResource( resourceId );
                    FileOutputStream out = new FileOutputStream(fPath);

                    byte[] buff = new byte[10240];

                    int read;

                    //try
                    //{
                    while ( ( read = in.read( buff ) ) > 0 )
                    {
                        out.write( buff,0, read );
                    }

                    //}
                    //finally
                    //{
                    in.close();
                    out.close();
                    //}

                    if ( isLocal && fileName.equals( "index.html" ) )
                    {
                        File idxFile    = new File( fPath );
                        FileReader fr   = new FileReader( idxFile );

                        String s;
                        StringBuilder totalStr = new StringBuilder();

                        BufferedReader br = new BufferedReader( fr );

                        while ( ( s = br.readLine() ) != null )
                        {
                            //totalStr += s;
                            totalStr.append( s );

                        }
                        totalStr = new StringBuilder( totalStr.toString().replaceAll("<pname>",
                                utils.GetSetting( context,"LOADED","ps4-hen-vtx" ) ) );

                        FileWriter fw = new FileWriter( idxFile );
                        fw.write(totalStr.toString());
                        fw.close();

                    }
                }
                catch ( IOException ignored )
                {

                }

                //catch (FileNotFoundException ignored)
                //{
                //
                //}

            }

        } ).start();

    }

    private void sendPayload( final String filePath, final String host, final int port )
    {
        Log.i( "zobbi", "sendPayload : " + filePath );
        Log.i( "zobbi", "host : " + host );
        Log.i( "zobbi", "port : " + port );

        new Thread( new Runnable()
        {
            public void run()
            {
                try
                {
                    File f = new File( filePath );
                    Socket socket = new Socket( host, port );

                    if( f.exists() )
                    {
                        BufferedOutputStream outStream  = new BufferedOutputStream( socket.getOutputStream() );
                        BufferedInputStream inStream    = new BufferedInputStream( new FileInputStream( f ) );

                        byte[] buffer = new byte[1024];

                        for ( int read = inStream.read(buffer); read >= 0; read = inStream.read(buffer) )
                        {
                            outStream.write( buffer,0, read );
                        }

                        inStream.close();
                        outStream.close();
                        socket.close();

                    }
                    else
                    {
                        socket.close();

                        //Toasty.showToast( ctx,"Error: Payload missing\nSelect a payload to send first", Toasty.Success );
                        Log.i("zobbi","Error: Payload missing\nSelect a payload to send first" );

                    }

                }
                catch( ConnectException e )
                {
                    try
                    {
                        Thread.sleep(1000 );
                    }
                    catch( InterruptedException ignored )
                    {
                        Toasty.showToast( ctx,"Error: Unable to send payload ", Toasty.Error );
                    }

                }
                catch ( IOException ignored )
                {

                }

            }

        } ).start();

        Toasty.showToast( ctx,"Payload sent", Toasty.Success );
        Log.i("zobbi","Payload sent" );

    }

    void StartSendPayload( final String filePath, final String host, final int port )
    {
        sendPayload( filePath, host, port );

    }

    void StopServerPayload()
    {
        if ( webServer != null )
        {
            if ( webServer.isAlive() )
            {
                webServer.closeAllConnections();
                webServer.stop();
            }

            webServer = null;
        }

    }

    void StartServerPayload( String filePayload )
    {
        //File selFile = new File(Environment.getExternalStorageDirectory() + "/xPloitServer/bin/ps4-hen-vtx.bin" );
        File selFile = new File( filePayload );
        if ( !selFile.isDirectory() )
        {
            Log.i("zobbi","selFile : " + selFile.getPath() );
            utils.SaveSetting( ctx,"PAYLOAD", selFile.getPath() );

            int extLen = 4;
            if ( selFile.getName().toLowerCase().endsWith( ".html" ) )
            {
                extLen = 5;
            }

            String fileName = selFile.getName().substring( 0, ( selFile.getName().length() ) - extLen );

            Log.i("zobbi","fileName : " + fileName );

            utils.SaveSetting( ctx,"LOADED", fileName );

            createResFile( ctx, R.raw.index_html,"index.html",true );

        }

        webServer = new ServerPayload( ctx,8080 );

        try
        {
            webServer.start();

            Toasty.showToast( ctx,"Start Payload Server", Toasty.Info );

            //text1.setText("http://" +   LocIp + ":8080/");

        }
        catch ( IOException ioEx )
        {
            ioEx.printStackTrace();

            Toasty.showToast( ctx,"Failed to start server on port 8080\nTrying to use port 9090", Toasty.Warning );

            try
            {
                webServer = null;
                webServer = new ServerPayload( ctx,9090 );
                webServer.start();

            }
            catch ( IOException ignored )
            {
                Toasty.showToast( ctx,"Failed to start server\nPort 8080 and 9090 might be in use by another app", Toasty.Error );
                //text3.setText("Error: ");
                //text1.setText("Port 8080 and 9090 are blocked");
            }
        }
    }


}
