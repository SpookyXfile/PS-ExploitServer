package com.spookyx.xploitserver5;


import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;

import android.content.BroadcastReceiver;
import android.content.Context;
import android.content.Intent;
import android.content.IntentFilter;
import android.net.wifi.WifiConfiguration;
import android.net.wifi.WifiConfiguration.KeyMgmt;
import android.net.wifi.WifiManager;
import android.os.Build;
import android.os.Handler;
import android.util.Log;

import androidx.annotation.RequiresApi;


@SuppressWarnings( { "unused", "WeakerAccess" } )
public class WifiApUtil
{
    private static final String TAG = "WifiAPUtil";
    public final static boolean DEBUG = true;

    public static final ThreadLocal<WifiApUtil> sInstance = new ThreadLocal<>();

    private WifiManager.LocalOnlyHotspotReservation mReservation;

    private static Handler  mHandler;

    private Context         mContext;

    private WifiManager     mWifiManager;

    private static final String DEFAULT_AP_PASSWORD = "12345678";

    public static final String WIFI_AP_STATE_CHANGED_ACTION = "android.net.wifi.WIFI_AP_STATE_CHANGED";
    public static final String EXTRA_WIFI_AP_STATE = "wifi_state";

    public static final int MESSAGE_AP_STATE_ENABLED    = 1;
    public static final int MESSAGE_AP_STATE_FAILED     = 2;

    public static int WIFI_AP_STATE_DISABLING   = 10;
    public static int WIFI_AP_STATE_DISABLED    = 11;
    public static int WIFI_AP_STATE_ENABLING    = 12;
    public static int WIFI_AP_STATE_ENABLED     = 13;
    public static int WIFI_AP_STATE_FAILED      = 14;

    public enum WifiSecurityType
    {
        WIFI_CIPHER_NO_PASS,
        WIFI_CIPHER_WPA,
        WIFI_CIPHER_WEP,
        WIFI_CIPHER_INVALID,
        WIFI_CIPHER_WPA2


    }

    private int     stateHotSpotEnable;
    private boolean isHotSpotEnable;

    private WifiApUtil( Context context )
    {
        if ( DEBUG )
            Log.d( TAG,"WifiAPUtils construct" );

        this.mContext = context;

        mWifiManager = (WifiManager) context.getSystemService( Context.WIFI_SERVICE );

        Log.e( TAG,"WifiApUtil : " );

        IntentFilter filter = new IntentFilter();
        filter.addAction( WIFI_AP_STATE_CHANGED_ACTION );

        context.registerReceiver( mWifiStateBroadcastReceiver, filter );

        stateHotSpotEnable = -1;
        isHotSpotEnable = false;

    }

    protected void finalize()
    {
        if ( DEBUG )
            Log.d( TAG,"finalize");

        mContext.unregisterReceiver( mWifiStateBroadcastReceiver );

    }

    public static WifiApUtil getInstance( Context c )
    {
        if ( sInstance.get() != null )
            return sInstance.get();
        else
            sInstance.set( new WifiApUtil( c ) );

        return sInstance.get();
    }

    @RequiresApi( api = Build.VERSION_CODES.O )
    public void turnOnHotspot()
    {
        WifiManager manager = (WifiManager) mContext.getSystemService( Context.WIFI_SERVICE );

        if ( manager != null )
        {
            try {
                manager.startLocalOnlyHotspot(new WifiManager.LocalOnlyHotspotCallback() {

                    @Override
                    public void onStarted(WifiManager.LocalOnlyHotspotReservation reservation) {
                        super.onStarted(reservation);

                        Log.d(TAG, "Wifi Hotspot is on now");

                        mReservation = reservation;
                    }

                    @Override
                    public void onStopped() {
                        super.onStopped();

                        Log.d(TAG, "onStopped: ");
                    }

                    @Override
                    public void onFailed(int reason) {
                        super.onFailed(reason);

                        Log.d( TAG, "onFailed: ");
                    }

                }, new Handler());
            }
            catch ( SecurityException securityEx )
            {
                securityEx.getStackTrace();

            }

        }

    }

    public void turnOffHotspot()
    {
        if ( mReservation != null )
        {
            mReservation.close();
        }

    }


    public boolean turnOnWifiAp( String ssid, String password, WifiSecurityType Type )
    {

        WifiConfiguration wifiConfiguration = new WifiConfiguration();
        wifiConfiguration.SSID = ssid;
        wifiConfiguration.networkId = 1;
        wifiConfiguration.allowedAuthAlgorithms.clear();
        wifiConfiguration.allowedGroupCiphers.clear();
        wifiConfiguration.allowedKeyManagement.clear();
        wifiConfiguration.allowedPairwiseCiphers.clear();
        wifiConfiguration.allowedProtocols.clear();

        if (Type == WifiSecurityType.WIFI_CIPHER_NO_PASS) {
            if (DEBUG) Log.d(TAG, "wifi ap----no password");
            wifiConfiguration.allowedAuthAlgorithms.set(WifiConfiguration.AuthAlgorithm.OPEN, true);
            wifiConfiguration.wepKeys[0] = "";
            wifiConfiguration.allowedKeyManagement.set(WifiConfiguration.KeyMgmt.NONE);
            wifiConfiguration.wepTxKeyIndex = 0;
        } else if (Type == WifiSecurityType.WIFI_CIPHER_WPA) {
            if (DEBUG) Log.d(TAG, "wifi ap----wpa");

            if (null != password && password.length() >= 8) {
                wifiConfiguration.preSharedKey = password;
            } else {
                wifiConfiguration.preSharedKey = DEFAULT_AP_PASSWORD;
            }
            wifiConfiguration.hiddenSSID = false;
            wifiConfiguration.allowedAuthAlgorithms.set(WifiConfiguration.AuthAlgorithm.OPEN);
            wifiConfiguration.allowedGroupCiphers.set(WifiConfiguration.GroupCipher.TKIP);
            wifiConfiguration.allowedKeyManagement.set(WifiConfiguration.KeyMgmt.WPA_PSK);
            //wifiConfiguration.allowedKeyManagement.set(4);
            wifiConfiguration.allowedPairwiseCiphers.set(WifiConfiguration.PairwiseCipher.TKIP);
            wifiConfiguration.allowedProtocols.set(WifiConfiguration.Protocol.WPA);
            wifiConfiguration.allowedGroupCiphers.set(WifiConfiguration.GroupCipher.CCMP);
            wifiConfiguration.allowedPairwiseCiphers.set(WifiConfiguration.PairwiseCipher.CCMP);
        } else if (Type == WifiSecurityType.WIFI_CIPHER_WPA2) {
            if (DEBUG) Log.d(TAG, "wifi ap---- wpa2");

            if (null != password && password.length() >= 8) {
                wifiConfiguration.preSharedKey = password;
            } else {
                wifiConfiguration.preSharedKey = DEFAULT_AP_PASSWORD;
            }
            wifiConfiguration.hiddenSSID = true;
            wifiConfiguration.allowedAuthAlgorithms.set(WifiConfiguration.AuthAlgorithm.OPEN);
            wifiConfiguration.allowedGroupCiphers.set(WifiConfiguration.GroupCipher.TKIP);
            wifiConfiguration.allowedKeyManagement.set(4);
            //wifiConfiguration.allowedKeyManagement.set(4);
            wifiConfiguration.allowedPairwiseCiphers.set(WifiConfiguration.PairwiseCipher.TKIP);
            wifiConfiguration.allowedProtocols.set(WifiConfiguration.Protocol.WPA);
            wifiConfiguration.allowedGroupCiphers.set(WifiConfiguration.GroupCipher.CCMP);
            wifiConfiguration.allowedPairwiseCiphers.set(WifiConfiguration.PairwiseCipher.CCMP);
        }

        try
        {
            Method method = mWifiManager.getClass().getMethod("setWifiApConfiguration",
                    wifiConfiguration.getClass());

            Log.i( TAG,"turnOnWifiAp : " );

            Boolean rt = (Boolean) method.invoke(mWifiManager, wifiConfiguration);

            if ( DEBUG )
                Log.i( TAG, " rt = " + rt );

        } catch (NoSuchMethodException | IllegalArgumentException
                | IllegalAccessException | InvocationTargetException e)
        {
            Log.e( TAG,"turnOnWifiAp : " +  e.getMessage() );

        }

        return setWifiApEnabled();

    }

    public int getWifiAPState()
    {
        int state = -1;

        try
        {
            Method method2 = mWifiManager.getClass().getMethod("getWifiApState" );

            //noinspection ConstantConditions
            state = (Integer) method2.invoke( mWifiManager );

        }
        catch ( Exception e )
        {
            Log.e( TAG, String.valueOf( e.getMessage() ) );
        }

        if ( DEBUG )
            Log.i("WifiAP","getWifiAPState.state " + state );

        return state;
    }

    private boolean setWifiApEnabled() {

        while (mWifiManager.getWifiState() != WifiManager.WIFI_STATE_DISABLED) {
            mWifiManager.setWifiEnabled(false);

            try {
                Thread.sleep(200);
            } catch (Exception e) {
                Log.e(TAG, String.valueOf(e.getMessage()));

                return false;
            }

        }

        // 确保wifi 热点关闭。
        while (getWifiAPState() != WIFI_AP_STATE_DISABLED) {
            try {
                Method method1 = mWifiManager.getClass().getMethod("setWifiApEnabled",
                        WifiConfiguration.class, boolean.class);

                method1.invoke(mWifiManager, null, false);

                Thread.sleep(200);

            } catch (Exception e) {
                Log.e(TAG, String.valueOf(e.getMessage()));

                return false;
            }
        }

        try {
            Method method1 = mWifiManager.getClass().getMethod("setWifiApEnabled",
                    WifiConfiguration.class, boolean.class);

            method1.invoke(mWifiManager, null, true);

            Thread.sleep(200);
        } catch (Exception e) {
            Log.e(TAG, String.valueOf(e.getMessage()));

            return false;
        }

        return true;
    }

    //关闭WiFi热点
    public void closeWifiAp() {
        if (getWifiAPState() != WIFI_AP_STATE_DISABLED) {
            try {
                Method method = mWifiManager.getClass().getMethod("getWifiApConfiguration");
                method.setAccessible(true);
                WifiConfiguration config = (WifiConfiguration) method.invoke(mWifiManager);
                Method method2 = mWifiManager.getClass().getMethod("setWifiApEnabled", WifiConfiguration.class, boolean.class);
                method2.invoke(mWifiManager, config, false);
            } catch (NoSuchMethodException | IllegalArgumentException | IllegalAccessException | InvocationTargetException e) {
                e.printStackTrace();
                Log.e(TAG, String.valueOf(e.getMessage()));
            }

        }
    }

    public void registerHandler(Handler handler)
    {
        mHandler = handler;

    }

    public void unregisterHandler()
    {
        mHandler = null;

    }


    private BroadcastReceiver mWifiStateBroadcastReceiver = new BroadcastReceiver()
    {

        @Override
        public void onReceive( Context context, Intent intent )
        {
            if ( DEBUG )
                Log.i(TAG, "WifiAPUtils onReceive: " + intent.getAction() );

            if ( WIFI_AP_STATE_CHANGED_ACTION.equals( intent.getAction() ) )
            {
                stateHotSpotEnable = intent.getIntExtra( EXTRA_WIFI_AP_STATE,-1 );

                if ( stateHotSpotEnable == WIFI_AP_STATE_ENABLED )
                {
                    if ( mHandler != null )
                    {
                        mHandler.sendEmptyMessage( MESSAGE_AP_STATE_ENABLED );
                    }

                    isHotSpotEnable = true;

                }

                if ( stateHotSpotEnable == WIFI_AP_STATE_DISABLED || stateHotSpotEnable == WIFI_AP_STATE_FAILED )
                {
                    if ( mHandler != null )
                        mHandler.sendEmptyMessage( MESSAGE_AP_STATE_FAILED );

                    isHotSpotEnable = false;
                }

            }
        }

    };


    public boolean isHotSpotEnable()
    {

        return isHotSpotEnable;
    }

    public int getStateHotSpot()
    {

        return stateHotSpotEnable;
    }

    //获取热点ssid
    public String getValidApSSID() {
        try {
            Method method = mWifiManager.getClass().getMethod("getWifiApConfiguration");

            WifiConfiguration configuration = (WifiConfiguration) method.invoke(mWifiManager);

            return configuration != null ? configuration.SSID : null;
        } catch (Exception e) {
            Log.e(TAG, String.valueOf(e.getMessage()));

            return null;
        }

    }

    //获取热点密码
    public String getValidPassword() {
        try {
            Method method = mWifiManager.getClass().getMethod("getWifiApConfiguration");
            WifiConfiguration configuration = (WifiConfiguration) method.invoke(mWifiManager);

            return configuration != null ? configuration.preSharedKey : null;
        } catch (Exception e) {
            Log.e(TAG, String.valueOf(e.getMessage()));

            return null;
        }

    }

    //获取热点安全类型
    public int getValidSecurity()
    {
        WifiConfiguration configuration;

        try
        {
            Method method = mWifiManager.getClass().getMethod("getWifiApConfiguration");
            configuration = (WifiConfiguration) method.invoke( mWifiManager );

            if ( configuration == null )
                return -1;

        }
        catch ( Exception e )
        {
            Log.e( TAG, String.valueOf(e.getMessage() ) );

            return WifiSecurityType.WIFI_CIPHER_INVALID.ordinal();
        }

        if ( DEBUG )
            Log.i( TAG,"getSecurity security=" + configuration.allowedKeyManagement );

        if ( configuration.allowedKeyManagement.get( KeyMgmt.NONE ) )
        {
            return WifiSecurityType.WIFI_CIPHER_NO_PASS.ordinal();
        }
        else if ( configuration.allowedKeyManagement.get( KeyMgmt.WPA_PSK ) )
        {
            return WifiSecurityType.WIFI_CIPHER_WPA.ordinal();
        }
        else if ( configuration.allowedKeyManagement.get(4) )
        { //4 means WPA2_PSK
            return WifiSecurityType.WIFI_CIPHER_WPA2.ordinal();
        }

        return WifiSecurityType.WIFI_CIPHER_INVALID.ordinal();
    }

}